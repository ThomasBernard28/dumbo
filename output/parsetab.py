
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSleftMINUSleftTIMESleftDIVIDEleftANDleftORrightDOTAND ASSIGN BIGGER COMMA DBLOCK_END DBLOCK_START DIFFERENT DIVIDE DO DOT ENDFOR ENDIF EQUALS FALSE FOR IF IN LOWER LPAREN MINUS NUMBER OR PLUS PRINT RPAREN SEMICOLON STRING TIMES TRUE TXT VARprogram : TXT\n               | TXT programprogram : dumbo_block\n               | dumbo_block programdumbo_block : DBLOCK_START expression_list DBLOCK_END\n                    | DBLOCK_START DBLOCK_ENDexpression_list : expression SEMICOLON\n                       | expression SEMICOLON expression_liststring_expression : STRING\n                        | VAR\n                        | string_expression DOT string_expressionexpression : PRINT string_expressionexpression : FOR VAR IN string_list DO expression_list ENDFOR\n          | FOR VAR IN VAR DO expression_list ENDFORexpression : VAR ASSIGN string_expression\n                | VAR ASSIGN string_list\n                | VAR ASSIGN numerical_expression\n                | VAR ASSIGN boolean_expressionstring_list : LPAREN string_list_interior RPARENstring_list_interior : STRING\n                            | STRING COMMA string_list_interiornumerical_expression : VAR\n                            | NUMBER\n                            | numerical_expression PLUS numerical_expression\n                            | numerical_expression MINUS numerical_expression\n                            | numerical_expression TIMES numerical_expression\n                            | numerical_expression DIVIDE numerical_expression\n\n    \n    boolean_expression : TRUE\n                       | FALSE\n                       | boolean_comparison\n                       | boolean_expression OR boolean_expression\n                       | boolean_expression AND boolean_expression\n    \n    boolean_comparison : numerical_expression BIGGER numerical_expression\n                       | numerical_expression LOWER numerical_expression\n                       | numerical_expression EQUALS numerical_expression\n                       | numerical_expression DIFFERENT numerical_expression\n    \n    expression : IF boolean_expression DO expression_list ENDIF\n    '
    
_lr_action_items = {'TXT':([0,2,3,8,14,],[2,2,2,-6,-5,]),'DBLOCK_START':([0,2,3,8,14,],[4,4,4,-6,-5,]),'$end':([1,2,3,5,6,8,14,],[0,-1,-3,-2,-4,-6,-5,]),'DBLOCK_END':([4,7,15,28,],[8,14,-7,-8,]),'PRINT':([4,15,37,64,65,],[10,10,10,10,10,]),'FOR':([4,15,37,64,65,],[11,11,11,11,11,]),'VAR':([4,10,11,13,15,20,29,30,37,38,39,40,41,42,43,44,45,46,47,64,65,],[12,18,19,26,12,31,18,49,12,26,26,26,26,26,26,26,26,26,26,12,12,]),'IF':([4,15,37,64,65,],[13,13,13,13,13,]),'SEMICOLON':([9,16,17,18,22,23,24,26,27,31,32,33,34,35,48,54,55,56,57,58,59,60,61,62,63,66,68,72,73,],[15,-12,-9,-10,-28,-29,-30,-22,-23,-10,-15,-16,-17,-18,-11,-31,-32,-33,-34,-35,-36,-24,-25,-26,-27,-19,-37,-14,-13,]),'STRING':([10,20,29,36,67,],[17,17,17,52,52,]),'ASSIGN':([12,],[20,]),'TRUE':([13,20,38,39,],[22,22,22,22,]),'FALSE':([13,20,38,39,],[23,23,23,23,]),'NUMBER':([13,20,38,39,40,41,42,43,44,45,46,47,],[27,27,27,27,27,27,27,27,27,27,27,27,]),'ENDIF':([15,28,53,],[-7,-8,68,]),'ENDFOR':([15,28,69,70,],[-7,-8,72,73,]),'DOT':([16,17,18,31,32,48,],[29,-9,-10,-10,29,29,]),'IN':([19,],[30,]),'LPAREN':([20,30,],[36,36,]),'DO':([21,22,23,24,26,27,49,50,54,55,56,57,58,59,60,61,62,63,66,],[37,-28,-29,-30,-22,-23,64,65,-31,-32,-33,-34,-35,-36,-24,-25,-26,-27,-19,]),'OR':([21,22,23,24,26,27,35,54,55,56,57,58,59,60,61,62,63,],[38,-28,-29,-30,-22,-23,38,-31,38,-33,-34,-35,-36,-24,-25,-26,-27,]),'AND':([21,22,23,24,26,27,35,54,55,56,57,58,59,60,61,62,63,],[39,-28,-29,-30,-22,-23,39,-31,-32,-33,-34,-35,-36,-24,-25,-26,-27,]),'BIGGER':([25,26,27,31,34,60,61,62,63,],[40,-22,-23,-22,40,-24,-25,-26,-27,]),'LOWER':([25,26,27,31,34,60,61,62,63,],[41,-22,-23,-22,41,-24,-25,-26,-27,]),'EQUALS':([25,26,27,31,34,60,61,62,63,],[42,-22,-23,-22,42,-24,-25,-26,-27,]),'DIFFERENT':([25,26,27,31,34,60,61,62,63,],[43,-22,-23,-22,43,-24,-25,-26,-27,]),'PLUS':([25,26,27,31,34,56,57,58,59,60,61,62,63,],[44,-22,-23,-22,44,44,44,44,44,-24,-25,-26,-27,]),'MINUS':([25,26,27,31,34,56,57,58,59,60,61,62,63,],[45,-22,-23,-22,45,45,45,45,45,45,-25,-26,-27,]),'TIMES':([25,26,27,31,34,56,57,58,59,60,61,62,63,],[46,-22,-23,-22,46,46,46,46,46,46,46,-26,-27,]),'DIVIDE':([25,26,27,31,34,56,57,58,59,60,61,62,63,],[47,-22,-23,-22,47,47,47,47,47,47,47,47,-27,]),'RPAREN':([51,52,71,],[66,-20,-21,]),'COMMA':([52,],[67,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,5,6,]),'dumbo_block':([0,2,3,],[3,3,3,]),'expression_list':([4,15,37,64,65,],[7,28,53,69,70,]),'expression':([4,15,37,64,65,],[9,9,9,9,9,]),'string_expression':([10,20,29,],[16,32,48,]),'boolean_expression':([13,20,38,39,],[21,35,54,55,]),'boolean_comparison':([13,20,38,39,],[24,24,24,24,]),'numerical_expression':([13,20,38,39,40,41,42,43,44,45,46,47,],[25,34,25,25,56,57,58,59,60,61,62,63,]),'string_list':([20,30,],[33,50,]),'string_list_interior':([36,67,],[51,71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> TXT','program',1,'p_program_txt','syntaxer.py',9),
  ('program -> TXT program','program',2,'p_program_txt','syntaxer.py',10),
  ('program -> dumbo_block','program',1,'p_program_dumbo','syntaxer.py',17),
  ('program -> dumbo_block program','program',2,'p_program_dumbo','syntaxer.py',18),
  ('dumbo_block -> DBLOCK_START expression_list DBLOCK_END','dumbo_block',3,'p_dumbo_block_expression_list','syntaxer.py',25),
  ('dumbo_block -> DBLOCK_START DBLOCK_END','dumbo_block',2,'p_dumbo_block_expression_list','syntaxer.py',26),
  ('expression_list -> expression SEMICOLON','expression_list',2,'p_expression_list','syntaxer.py',33),
  ('expression_list -> expression SEMICOLON expression_list','expression_list',3,'p_expression_list','syntaxer.py',34),
  ('string_expression -> STRING','string_expression',1,'p_string_expression','syntaxer.py',41),
  ('string_expression -> VAR','string_expression',1,'p_string_expression','syntaxer.py',42),
  ('string_expression -> string_expression DOT string_expression','string_expression',3,'p_string_expression','syntaxer.py',43),
  ('expression -> PRINT string_expression','expression',2,'p_expression_print','syntaxer.py',53),
  ('expression -> FOR VAR IN string_list DO expression_list ENDFOR','expression',7,'p_expression_for','syntaxer.py',58),
  ('expression -> FOR VAR IN VAR DO expression_list ENDFOR','expression',7,'p_expression_for','syntaxer.py',59),
  ('expression -> VAR ASSIGN string_expression','expression',3,'p_expression_assign','syntaxer.py',65),
  ('expression -> VAR ASSIGN string_list','expression',3,'p_expression_assign','syntaxer.py',66),
  ('expression -> VAR ASSIGN numerical_expression','expression',3,'p_expression_assign','syntaxer.py',67),
  ('expression -> VAR ASSIGN boolean_expression','expression',3,'p_expression_assign','syntaxer.py',68),
  ('string_list -> LPAREN string_list_interior RPAREN','string_list',3,'p_string_list','syntaxer.py',72),
  ('string_list_interior -> STRING','string_list_interior',1,'p_string_list_interior','syntaxer.py',76),
  ('string_list_interior -> STRING COMMA string_list_interior','string_list_interior',3,'p_string_list_interior','syntaxer.py',77),
  ('numerical_expression -> VAR','numerical_expression',1,'p_numerical_expression','syntaxer.py',85),
  ('numerical_expression -> NUMBER','numerical_expression',1,'p_numerical_expression','syntaxer.py',86),
  ('numerical_expression -> numerical_expression PLUS numerical_expression','numerical_expression',3,'p_numerical_expression','syntaxer.py',87),
  ('numerical_expression -> numerical_expression MINUS numerical_expression','numerical_expression',3,'p_numerical_expression','syntaxer.py',88),
  ('numerical_expression -> numerical_expression TIMES numerical_expression','numerical_expression',3,'p_numerical_expression','syntaxer.py',89),
  ('numerical_expression -> numerical_expression DIVIDE numerical_expression','numerical_expression',3,'p_numerical_expression','syntaxer.py',90),
  ('boolean_expression -> TRUE','boolean_expression',1,'p_boolean_expression','syntaxer.py',100),
  ('boolean_expression -> FALSE','boolean_expression',1,'p_boolean_expression','syntaxer.py',101),
  ('boolean_expression -> boolean_comparison','boolean_expression',1,'p_boolean_expression','syntaxer.py',102),
  ('boolean_expression -> boolean_expression OR boolean_expression','boolean_expression',3,'p_boolean_expression','syntaxer.py',103),
  ('boolean_expression -> boolean_expression AND boolean_expression','boolean_expression',3,'p_boolean_expression','syntaxer.py',104),
  ('boolean_comparison -> numerical_expression BIGGER numerical_expression','boolean_comparison',3,'p_boolean_comparison','syntaxer.py',113),
  ('boolean_comparison -> numerical_expression LOWER numerical_expression','boolean_comparison',3,'p_boolean_comparison','syntaxer.py',114),
  ('boolean_comparison -> numerical_expression EQUALS numerical_expression','boolean_comparison',3,'p_boolean_comparison','syntaxer.py',115),
  ('boolean_comparison -> numerical_expression DIFFERENT numerical_expression','boolean_comparison',3,'p_boolean_comparison','syntaxer.py',116),
  ('expression -> IF boolean_expression DO expression_list ENDIF','expression',5,'p_if_expression','syntaxer.py',122),
]
