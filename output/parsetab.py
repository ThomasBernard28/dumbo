
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BIGGER COMMA DBLOCK_END DBLOCK_START DIFFERENT DIVIDE DO DOT ENDFOR ENDIF EQUALS FALSE FOR IF IN LOWER LPAREN MINUS NUMBER OR PLUS PRINT QUOTE RPAREN SEMICOLON STRING TIMES TRUE TXT VARprogram : TXT\n               | TXT programprogram : dumbo_block\n               | dumbo_block programdumbo_block : DBLOCK_START expression_list DBLOCK_END\n                    | DBLOCK_START DBLOCK_ENDexpression_list : expression SEMICOLON\n                       | expression SEMICOLON expression_liststring_expression : STRING\n                  | VAR\n                  | string_expression DOT string_expressionexpression : PRINT string_expressionexpression : FOR VAR IN string_list DO expression_list ENDFOR\n          | FOR VAR IN VAR DO expression_list ENDFORexpression : VAR ASSIGN string_expression\n                | VAR ASSIGN string_listnumber : NUMBER\n              | NUMBER PLUS NUMBER\n              | NUMBER MINUS NUMBER\n              | NUMBER TIMES NUMBER\n              | NUMBER DIVIDE NUMBERboolean : boolean OR boolean\n               | boolean AND boolean\n               | number BIGGER number\n               | number LOWER number\n               | number EQUALS number\n               | number DIFFERENT number\n               | TRUE\n               | FALSEexpression_list : IF boolean DO expression_list ENDIFstring_list : LPAREN string_list_interior RPARENstring_list_interior : STRING\n                            | STRING COMMA string_list_interior'
    
_lr_action_items = {'TXT':([0,2,3,8,14,],[2,2,2,-6,-5,]),'DBLOCK_START':([0,2,3,8,14,],[4,4,4,-6,-5,]),'$end':([1,2,3,5,6,8,14,],[0,-1,-3,-2,-4,-6,-5,]),'DBLOCK_END':([4,7,15,26,59,],[8,14,-7,-8,-30,]),'IF':([4,15,27,60,61,],[10,10,10,10,10,]),'PRINT':([4,15,27,60,61,],[11,11,11,11,11,]),'FOR':([4,15,27,60,61,],[12,12,12,12,12,]),'VAR':([4,11,12,15,25,27,38,39,60,61,],[13,23,24,13,23,13,23,55,13,13,]),'SEMICOLON':([9,21,22,23,40,41,54,62,67,68,],[15,-12,-9,-10,-15,-16,-11,-31,-14,-13,]),'TRUE':([10,28,29,],[18,18,18,]),'FALSE':([10,28,29,],[19,19,19,]),'NUMBER':([10,28,29,30,31,32,33,34,35,36,37,],[20,20,20,20,20,20,20,50,51,52,53,]),'STRING':([11,25,38,42,63,],[22,22,22,58,58,]),'ASSIGN':([13,],[25,]),'ENDIF':([15,26,43,59,],[-7,-8,59,-30,]),'ENDFOR':([15,26,59,64,65,],[-7,-8,-30,67,68,]),'DO':([16,18,19,20,44,45,46,47,48,49,50,51,52,53,55,56,62,],[27,-28,-29,-17,-22,-23,-24,-25,-26,-27,-18,-19,-20,-21,60,61,-31,]),'OR':([16,18,19,20,44,45,46,47,48,49,50,51,52,53,],[28,-28,-29,-17,28,28,-24,-25,-26,-27,-18,-19,-20,-21,]),'AND':([16,18,19,20,44,45,46,47,48,49,50,51,52,53,],[29,-28,-29,-17,29,29,-24,-25,-26,-27,-18,-19,-20,-21,]),'BIGGER':([17,20,50,51,52,53,],[30,-17,-18,-19,-20,-21,]),'LOWER':([17,20,50,51,52,53,],[31,-17,-18,-19,-20,-21,]),'EQUALS':([17,20,50,51,52,53,],[32,-17,-18,-19,-20,-21,]),'DIFFERENT':([17,20,50,51,52,53,],[33,-17,-18,-19,-20,-21,]),'PLUS':([20,],[34,]),'MINUS':([20,],[35,]),'TIMES':([20,],[36,]),'DIVIDE':([20,],[37,]),'DOT':([21,22,23,40,54,],[38,-9,-10,38,38,]),'IN':([24,],[39,]),'LPAREN':([25,39,],[42,42,]),'RPAREN':([57,58,66,],[62,-32,-33,]),'COMMA':([58,],[63,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,5,6,]),'dumbo_block':([0,2,3,],[3,3,3,]),'expression_list':([4,15,27,60,61,],[7,26,43,64,65,]),'expression':([4,15,27,60,61,],[9,9,9,9,9,]),'boolean':([10,28,29,],[16,44,45,]),'number':([10,28,29,30,31,32,33,],[17,17,17,46,47,48,49,]),'string_expression':([11,25,38,],[21,40,54,]),'string_list':([25,39,],[41,56,]),'string_list_interior':([42,63,],[57,66,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> TXT','program',1,'p_program_txt','yacc.py',9),
  ('program -> TXT program','program',2,'p_program_txt','yacc.py',10),
  ('program -> dumbo_block','program',1,'p_program_dumbo','yacc.py',17),
  ('program -> dumbo_block program','program',2,'p_program_dumbo','yacc.py',18),
  ('dumbo_block -> DBLOCK_START expression_list DBLOCK_END','dumbo_block',3,'p_dumbo_block_expression_list','yacc.py',25),
  ('dumbo_block -> DBLOCK_START DBLOCK_END','dumbo_block',2,'p_dumbo_block_expression_list','yacc.py',26),
  ('expression_list -> expression SEMICOLON','expression_list',2,'p_expression_list','yacc.py',33),
  ('expression_list -> expression SEMICOLON expression_list','expression_list',3,'p_expression_list','yacc.py',34),
  ('string_expression -> STRING','string_expression',1,'p_string_expression','yacc.py',41),
  ('string_expression -> VAR','string_expression',1,'p_string_expression','yacc.py',42),
  ('string_expression -> string_expression DOT string_expression','string_expression',3,'p_string_expression','yacc.py',43),
  ('expression -> PRINT string_expression','expression',2,'p_expression_print','yacc.py',53),
  ('expression -> FOR VAR IN string_list DO expression_list ENDFOR','expression',7,'p_expression_for','yacc.py',57),
  ('expression -> FOR VAR IN VAR DO expression_list ENDFOR','expression',7,'p_expression_for','yacc.py',58),
  ('expression -> VAR ASSIGN string_expression','expression',3,'p_expression_assign','yacc.py',64),
  ('expression -> VAR ASSIGN string_list','expression',3,'p_expression_assign','yacc.py',65),
  ('number -> NUMBER','number',1,'p_expression_number','yacc.py',69),
  ('number -> NUMBER PLUS NUMBER','number',3,'p_expression_number','yacc.py',70),
  ('number -> NUMBER MINUS NUMBER','number',3,'p_expression_number','yacc.py',71),
  ('number -> NUMBER TIMES NUMBER','number',3,'p_expression_number','yacc.py',72),
  ('number -> NUMBER DIVIDE NUMBER','number',3,'p_expression_number','yacc.py',73),
  ('boolean -> boolean OR boolean','boolean',3,'p_expression_boolean','yacc.py',87),
  ('boolean -> boolean AND boolean','boolean',3,'p_expression_boolean','yacc.py',88),
  ('boolean -> number BIGGER number','boolean',3,'p_expression_boolean','yacc.py',89),
  ('boolean -> number LOWER number','boolean',3,'p_expression_boolean','yacc.py',90),
  ('boolean -> number EQUALS number','boolean',3,'p_expression_boolean','yacc.py',91),
  ('boolean -> number DIFFERENT number','boolean',3,'p_expression_boolean','yacc.py',92),
  ('boolean -> TRUE','boolean',1,'p_expression_boolean','yacc.py',93),
  ('boolean -> FALSE','boolean',1,'p_expression_boolean','yacc.py',94),
  ('expression_list -> IF boolean DO expression_list ENDIF','expression_list',5,'p_expression_if','yacc.py',109),
  ('string_list -> LPAREN string_list_interior RPAREN','string_list',3,'p_string_list','yacc.py',114),
  ('string_list_interior -> STRING','string_list_interior',1,'p_string_list_interior','yacc.py',118),
  ('string_list_interior -> STRING COMMA string_list_interior','string_list_interior',3,'p_string_list_interior','yacc.py',119),
]
