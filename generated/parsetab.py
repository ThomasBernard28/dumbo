
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN COMMA DBLOCK_END DBLOCK_START DIVIDE DO DOT ENDFOR ENDIF FALSE FOR IF IN LPAREN MINUS NUMBER OR PLUS PRINT QUOTE RPAREN SEMICOLON STRING TIMES TRUE TXT VARprogram : TXT\n               | TXT programprogram : dumbo_block\n               | dumbo_block programdumbo_block : DBLOCK_START expression_list DBLOCK_END\n                    | DBLOCK_START DBLOCK_ENDexpression_list : expression SEMICOLON\n                       | expression SEMICOLON expression_liststring_expression : STRING\n                  | VAR\n                  | string_expression DOT string_expressionexpression : PRINT string_expressionexpression : FOR VAR IN string_list DO expression_list ENDFOR\n          | FOR VAR IN VAR DO expression_list ENDFORexpression : VAR ASSIGN string_expression\n                | VAR ASSIGN string_liststring_list : LPAREN string_list_interior RPARENstring_list_interior : STRING\n                            | STRING COMMA string_list_interior'
    
_lr_action_items = {'TXT':([0,2,3,8,13,],[2,2,2,-6,-5,]),'DBLOCK_START':([0,2,3,8,13,],[4,4,4,-6,-5,]),'$end':([1,2,3,5,6,8,13,],[0,-1,-3,-2,-4,-6,-5,]),'DBLOCK_END':([4,7,14,20,],[8,13,-7,-8,]),'PRINT':([4,14,31,32,],[10,10,10,10,]),'FOR':([4,14,31,32,],[11,11,11,11,]),'VAR':([4,10,11,14,19,21,22,31,32,],[12,17,18,12,17,17,27,12,12,]),'SEMICOLON':([9,15,16,17,23,24,26,33,38,39,],[14,-12,-9,-10,-15,-16,-11,-17,-14,-13,]),'STRING':([10,19,21,25,34,],[16,16,16,30,30,]),'ASSIGN':([12,],[19,]),'ENDFOR':([14,20,35,36,],[-7,-8,38,39,]),'DOT':([15,16,17,23,26,],[21,-9,-10,21,21,]),'IN':([18,],[22,]),'LPAREN':([19,22,],[25,25,]),'DO':([27,28,33,],[31,32,-17,]),'RPAREN':([29,30,37,],[33,-18,-19,]),'COMMA':([30,],[34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,5,6,]),'dumbo_block':([0,2,3,],[3,3,3,]),'expression_list':([4,14,31,32,],[7,20,35,36,]),'expression':([4,14,31,32,],[9,9,9,9,]),'string_expression':([10,19,21,],[15,23,26,]),'string_list':([19,22,],[24,28,]),'string_list_interior':([25,34,],[29,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> TXT','program',1,'p_program_txt','yacc.py',9),
  ('program -> TXT program','program',2,'p_program_txt','yacc.py',10),
  ('program -> dumbo_block','program',1,'p_program_dumbo','yacc.py',17),
  ('program -> dumbo_block program','program',2,'p_program_dumbo','yacc.py',18),
  ('dumbo_block -> DBLOCK_START expression_list DBLOCK_END','dumbo_block',3,'p_dumbo_block_expression_list','yacc.py',25),
  ('dumbo_block -> DBLOCK_START DBLOCK_END','dumbo_block',2,'p_dumbo_block_expression_list','yacc.py',26),
  ('expression_list -> expression SEMICOLON','expression_list',2,'p_expression_list','yacc.py',33),
  ('expression_list -> expression SEMICOLON expression_list','expression_list',3,'p_expression_list','yacc.py',34),
  ('string_expression -> STRING','string_expression',1,'p_string_expression','yacc.py',41),
  ('string_expression -> VAR','string_expression',1,'p_string_expression','yacc.py',42),
  ('string_expression -> string_expression DOT string_expression','string_expression',3,'p_string_expression','yacc.py',43),
  ('expression -> PRINT string_expression','expression',2,'p_expression_print','yacc.py',53),
  ('expression -> FOR VAR IN string_list DO expression_list ENDFOR','expression',7,'p_expression_for','yacc.py',57),
  ('expression -> FOR VAR IN VAR DO expression_list ENDFOR','expression',7,'p_expression_for','yacc.py',58),
  ('expression -> VAR ASSIGN string_expression','expression',3,'p_expression_assign','yacc.py',64),
  ('expression -> VAR ASSIGN string_list','expression',3,'p_expression_assign','yacc.py',65),
  ('string_list -> LPAREN string_list_interior RPAREN','string_list',3,'p_string_list','yacc.py',69),
  ('string_list_interior -> STRING','string_list_interior',1,'p_string_list_interior','yacc.py',73),
  ('string_list_interior -> STRING COMMA string_list_interior','string_list_interior',3,'p_string_list_interior','yacc.py',74),
]
